buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.1.RELEASE")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE"
        classpath 'com.github.ksoichiro:gradle-console-reporter:0.6.2'
    }
}


apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'com.github.ksoichiro.console.reporter'

bootJar {
    version = '0.1.0'
    archiveName = "tw-citibike-apis-producer" + version + '.jar'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencyManagement {
    imports {
        mavenBom 'com.amazonaws:aws-java-sdk-bom:1.11.820'
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile 'org.springframework.kafka:spring-kafka:2.1.5.RELEASE'
    compile 'com.amazonaws:aws-java-sdk-cloudwatch'
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("junit:junit")
}

test {
    reports {
        junitXml.enabled = true
        html.enabled = false
    }
}

jacoco {
    toolVersion = "0.8.3"
}

tasks.jacocoTestReport {
    reports {
        xml.enabled = false
        csv.enabled = false
        html.enabled = true
        html.destination = file("$buildDir/reports/coverage")
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: [
                            "com/tw/Application.class",
                            "com/tw/KafkaConfiguration.class",
                            "com/tw/ProducerScheduler.class"
                    ])
        })
    }
}

task testCoverage() {
    group = "verification"
    description = "Runs the unit tests with coverage."
    dependsOn(":test", ":jacocoTestReport", ":check" )
    tasks.jacocoTestReport.mustRunAfter(tasks.test)
    tasks.check.mustRunAfter(tasks.jacocoTestReport)
}
